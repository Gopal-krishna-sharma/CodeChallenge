<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="4" hostname="LAPTOP-GTKH5I4T" failures="0" tests="5" name="Default test" time="0.059" errors="0" timestamp="2022-10-01T17:03:14 IST">
  <testcase classname="testClasses.BaseTest" name="@BeforeTest beforeTest" time="0.001">
    <failure type="java.lang.Error" message="Unresolved compilation problem: 
	Syntax error, insert &amp;quot;;&amp;quot; to complete Statement
">
      <![CDATA[java.lang.Error: Unresolved compilation problem: 
Syntax error, insert ";" to complete Statement

at testClasses.BaseTest.setupDriver(BaseTest.java:90)
at testClasses.BaseTest.beforeTest(BaseTest.java:65)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:69)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:361)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:296)
at org.testng.TestRunner.invokeTestConfigurations(TestRunner.java:643)
at org.testng.TestRunner.beforeRun(TestRunner.java:632)
at org.testng.TestRunner.run(TestRunner.java:594)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:433)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:427)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:387)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </failure>
  </testcase> <!-- @BeforeTest beforeTest -->
  <testcase classname="testClasses.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testClasses.BaseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testClasses.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testClasses.BaseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testClasses.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testClasses.BaseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testClasses.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testClasses.BaseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testClasses.BaseTest" name="@BeforeMethod beforeMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @BeforeMethod beforeMethod -->
  <testcase classname="testClasses.BaseTest" name="@AfterMethod afterMethod" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod afterMethod -->
  <testcase classname="testClasses.BaseTest" name="@AfterTest afterTest" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterTest afterTest -->
  <testcase classname="testClasses.TestClass" name="AppLogin" time="0.0">
    <skipped/>
  </testcase> <!-- AppLogin -->
  <testcase classname="testClasses.TestClass" name="NavToInventory" time="0.0">
    <skipped/>
  </testcase> <!-- NavToInventory -->
  <testcase classname="testClasses.TestClass" name="CreateProduct" time="0.0">
    <skipped/>
  </testcase> <!-- CreateProduct -->
  <testcase classname="testClasses.TestClass" name="NavToManufacturing" time="0.0">
    <skipped/>
  </testcase> <!-- NavToManufacturing -->
  <testcase classname="testClasses.TestClass" name="CreateManufacturingOrder" time="0.0">
    <skipped/>
  </testcase> <!-- CreateManufacturingOrder -->
  <testcase classname="testClasses.BaseTest" name="@BeforeSuite beforeSuite" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite beforeSuite -->
  <testcase classname="testClasses.BaseTest" name="@BeforeTest beforeTest" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest beforeTest -->
  <testcase classname="testClasses.BaseTest" name="@AfterSuite afterSuite" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite afterSuite -->
  <testcase classname="testClasses.BaseTest" name="@AfterTest afterTest" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterTest afterTest -->
</testsuite> <!-- Default test -->
